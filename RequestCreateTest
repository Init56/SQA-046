using DriverWrapper;
using NUnit.Framework;
using OpenQA.Selenium;
using System;
using VacationAuto_Test.Page.Common;
using System.Threading;
using UniqueContainerManager;
using VacationAuto_Test.Page.MyRequest;
using ExtentReportManager.Attributes;
using VacationAuto_Test.Helpers;
using DriverWrapper.Core;
using System.Collections.Generic;
using System.Linq;
using static VacationAuto_Test.Helpers.VacationRequestHelper;
using VacationAuto_Test.Helpers.Model;
using VacationAuto_Test.Extension;
using VacationAuto_Test.Core.Common.Texts;

namespace VacationAuto_Test.Tests.MainPage.Create
{
    [TestFixture(typeof(AFirefoxDriver))]
    [Category("")]
    public class RequestCreateTest<TDriver> where TDriver : IWebDriver, new()
    {
        protected const string Host = "http://s-msk-t-hr-ws1.raiffeisen.ru/Vacations/VacationsOrders";
        protected IWebDriver Driver { get; private set; }


        public RequestsTable RequestsButtons => new RequestsTable(Driver);

        public RequestForm ReqForm => new RequestForm(Driver, Driver.FindElement(By.Id("createLeaveRequestWindow")));
        public Alert CancelAlert => new Alert(Driver, Driver.FindElement(By.ClassName("swal2-modal selene-alert swal2-show")));

        [OneTimeSetUp]
        public virtual void OneTimeSetUp()
        {
            Thread.Sleep(1000);
            Driver = new TDriver();
        }


        [SetUp]
        public virtual void SetUp()
        {

            var testClass = TestContext.CurrentContext.Test.ClassName;
            var classType = Type.GetType(testClass);

            Driver.Navigate().GoToUrl(Host);

        }

        [TearDown]
        public virtual void TearDown()
        {
            UniqueContainer.RemoveUniqueEntities();
        }

        [OneTimeTearDown]
        public void OneTimeTearDown()
        {
            Driver.Quit();
            Driver.Dispose();
        }






        [Test, Title("FT-P - Проверка создания заявления на отпуск типа «{0}» сотрудника"), Author("V.Kadysev")]
        [TestCase(PeriodRequest.TwoWeek)]
        [TestCase(PeriodRequest.Week)]
        public void RequestCreate_2Weeks_or_1Week_Success(PeriodRequest period)
        {
            //Необходимо внедрить SQL команду на удаление всех имеющихся заявок под опред. пользователем перед выполнением каждого теста

            //тестовые данные
            var vactionRequestHelper = new VacationRequestHelper(Driver);

            var from = DateTime.Now;

            var requests = new VacationRequests();
            requests.Add(new VacationRequest(period, from, from.AddDays(period.CountDays())));

            //инцилизация
            vactionRequestHelper.Create(requests);

            //Сохранение заявки
            ReqForm.SaveRequest.Click();

            //проверки
            var row = vactionRequestHelper.GetCreatedRow(VacationConstans.STATUS_DRAFT, "Кадысев Василий Игоревич", requests);

            Assert.IsNotNull(row);
        }

        [Test, Title("FT-P - Проверка создания заявления на отпуск типа «{0}» с {1} по {2}"), Author("V.Kadysev")]
        [TestCase(PeriodRequest.Days, "02.04.2018", "02.04.2018")]
        [TestCase(PeriodRequest.Days, "28.03.2018", "31.03.2018")]
        [TestCase(PeriodRequest.Corp, "28.03.2018", "28.03.2018")]
        [TestCase(PeriodRequest.Corp, "28.03.2018", "31.03.2018")]
        public void RequestCreate_ByDay_or_Corp_Success(PeriodRequest period, string fromString, string toString)
        {
            //Необходимо внедрить SQL команду на удаление всех имеющихся заявок под опред. пользователем перед выполнением каждого теста

            //тестовые данные
            var vactionRequestHelper = new VacationRequestHelper(Driver);

            var from = DateTime.Parse(fromString);
            var to = DateTime.Parse(toString);
            var qDays = (to - from).Days + 1;

            var requests = new VacationRequests();
            requests.Add(new VacationRequest(period, from, to));

            //инцилизация
            vactionRequestHelper.Create(requests);

            //Сохранение заявки
            ReqForm.SaveRequest.Click();

            //проверки
            var row = vactionRequestHelper.GetCreatedRow(VacationConstans.STATUS_DRAFT, "Кадысев Василий Игоревич", requests);

            Assert.IsNotNull(row);
        }

        [Test, Title("FT-P - Проверка создания заявления на отпуск сотрудника, с указанием двух вариантов"), Author("V.Kadysev")]
        [TestCase(PeriodRequest.TwoWeek, "01.04.2018", "14.04.2018", PeriodRequest.Week, "15.04.2018", "21.04.2018")]
        [TestCase(PeriodRequest.TwoWeek, "01.07.2018", "14.07.2018", PeriodRequest.Days, "15.07.2018", "20.07.2018")]
        public void RequestCreate_2Variants_Success(PeriodRequest period1, string fromString1, string toString1, PeriodRequest period2, string fromString2, string toString2)
        {
            //Необходимо внедрить SQL команду на удаление всех имеющихся заявок под опред. пользователем перед выполнением каждого теста

            //тестовые данные
            var vactionRequestHelper = new VacationRequestHelper(Driver);
            var from1 = DateTime.Parse(fromString1);
            var to1 = DateTime.Parse(toString1);
            var from2 = DateTime.Parse(fromString2);
            var to2 = DateTime.Parse(toString2);
            var minfrom = from1 < from2 ? from1 : from2;
            var maxto = to1 > to2 ? to1 : to2;
            var qDays = (maxto - minfrom).Days + 1;
            var requests = new VacationRequestTwoVariant();
            requests.Add(new VacationRequestsTwoVariant(period1, from1, to1, period2, from2, to2));
            //инцилизация
            vactionRequestHelper.CreateTwoVariant(requests);
            //Сохранение заявки
            ReqForm.SaveRequest.Click();
            //проверки
            var row = vactionRequestHelper.GetCreatedRow(VacationConstans.STATUS_DRAFT, "Кадысев Василий Игоревич", minfrom, maxto, qDays );
            Assert.IsNotNull(row);
        }
        [Test, Title("FT-P - Проверка создания заявления на отпуск сотрудника, с указанием двух вариантов"), Author("V.Kadysev")]
        public void RequestCreate_2WeeksAndByDays_Success()
        {
            //Поля "На две недели"
            var DF2W = ReqForm.DateFrom2W;
            var DT2W = ReqForm.DateTo2Week;
            var from2W = ReqForm.DPDateFrom2Week;
            var to2W = ReqForm.DPDateTo2Week;
            //Поля "По дням"
            var DFByDays = ReqForm.DateFromByDays;
            var DTByDays = ReqForm.DateToByDays;
            var fromBD = ReqForm.DPDateFromByDays;
            var toBD = ReqForm.DPDateToByDays;
            //Поля Итого
            var Itogo = ReqForm.Itogo;
            var DateFrom = ReqForm.DateFrom;
            var DateTo = ReqForm.DateTo;

            Thread.Sleep(3000);
            RequestsButtons.CreateRequestButton.Click();
            Thread.Sleep(1000);
            ReqForm.CBTwoWeek.Click();
            ReqForm.DPDateFrom2Week.Select(DateTime.Now);
            ReqForm.CBByDays.Click();
            ReqForm.DPDateFromByDays.Set(DateTime.Now.AddDays(14));
            ReqForm.DPDateToByDays.Set(DateTime.Now.AddDays(16));
            ReqForm.DateToByDays.SendKeys(Keys.Enter);
            Assert.That(fromBD.GetDate(), Is.EqualTo(to2W.GetDate()?.AddDays(1)));
            Assert.That(toBD.GetDate(), Is.EqualTo(from2W.GetDate()?.AddDays(16)));
            Assert.That(Itogo.AltText, Is.EqualTo("17"));

            //Проверка в разделе "Итого", даты "С" 
            var resultFrom = ItogoVavidate.Assert2DateFrom(DF2W, DFByDays, DateFrom);
            Assert.That(resultFrom, Is.True);

            //Проверка в разделе "Итого", даты "По" 
            var resultTo = ItogoVavidate.Assert2DateTo(DT2W, DTByDays, DateTo);
            Assert.That(resultTo, Is.True);

            ReqForm.SaveRequest.Click();
        }
        [Test, Title("FT-P - Проверка создания заявления на отпуск сотрудника, с указанием двух вариантов"), Author("V.Kadysev")]
        public void RequestCreate_2WeeksAndCorp_Success()
        {
            //Поля "На две недели"
            var DF2W = ReqForm.DateFrom2W;
            var DT2W = ReqForm.DateTo2Week;
            var from2W = ReqForm.DPDateFrom2Week;
            var to2W = ReqForm.DPDateTo2Week;
            //Поля "Корпоративный"
            var DFCorp = ReqForm.DateFromCorp;
            var DTCorp = ReqForm.DateToCorp;
            var fromCorp = ReqForm.DPDateFromCorp;
            var toCorp = ReqForm.DPDateToCorp;
            //Поля Итого
            var Itogo = ReqForm.Itogo;
            var DateFrom = ReqForm.DateFrom;
            var DateTo = ReqForm.DateTo;

            Thread.Sleep(3000);
            RequestsButtons.CreateRequestButton.Click();
            Thread.Sleep(3000);
            ReqForm.CBTwoWeek.Click();
            ReqForm.DPDateFrom2Week.Select(DateTime.Now);
            ReqForm.CBCorp.Click();
            ReqForm.DPDateFromCorp.Set(DateTime.Now.AddDays(14));
            ReqForm.DPDateToCorp.Set(DateTime.Now.AddDays(16));
            ReqForm.DateToCorp.SendKeys(Keys.Enter);
            Assert.That(fromCorp.GetDate(), Is.EqualTo(to2W.GetDate()?.AddDays(1)));
            Assert.That(toCorp.GetDate(), Is.EqualTo(from2W.GetDate()?.AddDays(16)));
            Assert.That(Itogo.AltText, Is.EqualTo("17"));

            //Проверка в разделе "Итого", даты "С" 
            var resultFrom = ItogoVavidate.Assert2DateFrom(DF2W, DFCorp, DateFrom);
            Assert.That(resultFrom, Is.True);

            //Проверка в разделе "Итого", даты "По" 
            var resultTo = ItogoVavidate.Assert2DateTo(DT2W, DTCorp, DateTo);
            Assert.That(resultTo, Is.True);

            ReqForm.SaveRequest.Click();
        }
        [Test, Title("FT-P - Проверка создания заявления на отпуск сотрудника, с указанием двух вариантов"), Author("V.Kadysev")]
        public void RequestCreate_1WeeksAndByDays_Success()
        {
            //Поля "На две недели"
            var DF1W = ReqForm.DateFromOneWeek;
            var DT1W = ReqForm.DateToOneWeek;
            var from1W = ReqForm.DPDateFromOneWeek;
            var to1W = ReqForm.DPDateToOneWeek;
            //Поля "По дням"
            var DFByDays = ReqForm.DateFromByDays;
            var DTByDays = ReqForm.DateToByDays;
            var fromBD = ReqForm.DPDateFromByDays;
            var toBD = ReqForm.DPDateToByDays;
            //Поля Итого
            var Itogo = ReqForm.Itogo;
            var DateFrom = ReqForm.DateFrom;
            var DateTo = ReqForm.DateTo;

            Thread.Sleep(3000);
            RequestsButtons.CreateRequestButton.Click();
            Thread.Sleep(1000);
            ReqForm.CBOneWeek.Click();
            ReqForm.DPDateFromOneWeek.Select(DateTime.Now);
            ReqForm.CBByDays.Click();
            ReqForm.DPDateFromByDays.Set(DateTime.Now.AddDays(7));
            ReqForm.DPDateToByDays.Set(DateTime.Now.AddDays(9));
            ReqForm.DateToByDays.SendKeys(Keys.Enter);
            Assert.That(fromBD.GetDate(), Is.EqualTo(to1W.GetDate()?.AddDays(1)));
            Assert.That(toBD.GetDate(), Is.EqualTo(from1W.GetDate()?.AddDays(9)));
            Assert.That(Itogo.AltText, Is.EqualTo("10"));

            //Проверка в разделе "Итого", даты "С" 
            var resultFrom = ItogoVavidate.Assert2DateFrom(DF1W, DFByDays, DateFrom);
            Assert.That(resultFrom, Is.True);

            //Проверка в разделе "Итого", даты "По" 
            var resultTo = ItogoVavidate.Assert2DateTo(DT1W, DTByDays, DateTo);
            Assert.That(resultTo, Is.True);

            ReqForm.SaveRequest.Click();
        }
        [Test, Title("FT-P - Проверка создания заявления на отпуск сотрудника, с указанием двух вариантов"), Author("V.Kadysev")]
        public void RequestCreate_CorpAndByDays_Success()
        {
            //Поля "Корпоративный"
            var DFCorp = ReqForm.DateFromCorp;
            var DTCorp = ReqForm.DateToCorp;
            var fromCorp = ReqForm.DPDateFromCorp;
            var toCorp = ReqForm.DPDateToCorp;
            //Поля "По дням"
            var DFByDays = ReqForm.DateFromByDays;
            var DTByDays = ReqForm.DateToByDays;
            var fromBD = ReqForm.DPDateFromByDays;
            var toBD = ReqForm.DPDateToByDays;
            //Поля Итого
            var Itogo = ReqForm.Itogo;
            var DateFrom = ReqForm.DateFrom;
            var DateTo = ReqForm.DateTo;

            Thread.Sleep(3000);
            RequestsButtons.CreateRequestButton.Click();
            Thread.Sleep(1000);
            ReqForm.CBCorp.Click();
            ReqForm.DPDateFromCorp.Select(DateTime.Now);
            ReqForm.DPDateToCorp.Set(DateTime.Now.AddDays(6));
            //ReqForm.DateToCorp.SendKeys(Keys.Enter);
            ReqForm.CBByDays.Click();
            ReqForm.DPDateFromByDays.Set(DateTime.Now.AddDays(7));
            ReqForm.DPDateToByDays.Set(DateTime.Now.AddDays(9));
            ReqForm.DateToByDays.SendKeys(Keys.Enter);
            Assert.That(fromBD.GetDate(), Is.EqualTo(toCorp.GetDate()?.AddDays(1)));
            Assert.That(toBD.GetDate(), Is.EqualTo(fromCorp.GetDate()?.AddDays(9)));
            Assert.That(Itogo.AltText, Is.EqualTo("10"));

            //Проверка в разделе "Итого", даты "С" 
            var resultFrom = ItogoVavidate.Assert2DateFrom(DFCorp, DFByDays, DateFrom);
            Assert.That(resultFrom, Is.True);

            //Проверка в разделе "Итого", даты "По" 
            var resultTo = ItogoVavidate.Assert2DateTo(DTCorp, DTByDays, DateTo);
            Assert.That(resultTo, Is.True);

            ReqForm.SaveRequest.Click();
        }
        [Test, Title("FT-P - Проверка создания заявления на отпуск сотрудника, с указанием трех вариантов"), Author("V.Kadysev")]
        public void RequestCreate_2WeeksOneWeekAndByDays_Success()
        {
            Thread.Sleep(3000);
            RequestsButtons.CreateRequestButton.Click();

            //Поля "На две недели"
            var DF2W = ReqForm.DateFrom2W;
            var DT2W = ReqForm.DateTo2Week;
            var from2W = ReqForm.DPDateFrom2Week;
            var to2W = ReqForm.DPDateTo2Week;
            //Поля "На неделю"
            var DF1W = ReqForm.DateFromOneWeek;
            var DT1W = ReqForm.DateToOneWeek;
            var from1W = ReqForm.DPDateFromOneWeek;
            var to1W = ReqForm.DPDateToOneWeek;
            //Поля "По дням"
            var DFByDays = ReqForm.DateFromByDays;
            var DTByDays = ReqForm.DateToByDays;
            var fromBD = ReqForm.DPDateFromByDays;
            var toBD = ReqForm.DPDateToByDays;
            //Поля Итого
            var Itogo = ReqForm.Itogo;
            var DateFrom = ReqForm.DateFrom;
            var DateTo = ReqForm.DateTo;

            ReqForm.CBTwoWeek.Click();
            ReqForm.DPDateFrom2Week.Select(DateTime.Now);
            ReqForm.CBOneWeek.Click();
            ReqForm.DPDateFromOneWeek.Set(DateTime.Now.AddDays(14));
            ReqForm.DateFromOneWeek.SendKeys(Keys.Enter);
            ReqForm.CBByDays.Click();
            ReqForm.DPDateFromByDays.Set(DateTime.Now.AddDays(21));
            ReqForm.DPDateToByDays.Set(DateTime.Now.AddDays(23));
            ReqForm.DateToByDays.SendKeys(Keys.Enter);
            Assert.That(Itogo.AltText, Is.EqualTo("24"));

            //Проверка в разделе "Итого", даты "С" 
            var resultFrom = ItogoVavidate.Assert3DateFrom(DF2W, DF1W, DFByDays, DateFrom);
            Assert.That(resultFrom, Is.True);

            //Проверка в разделе "Итого", даты "По" 
            var resultTo = ItogoVavidate.Assert3DateTo(DT2W, DT1W, DTByDays, DateTo);
            Assert.That(resultTo, Is.True);

            ReqForm.SaveRequest.Click();
        }
        [Test, Title("FT-P - Проверка создания заявления на отпуск сотрудника, с указанием трех вариантов"), Author("V.Kadysev")]
        public void RequestCreate_2WeeksOneWeekAndCorp_Success()
        {
            Thread.Sleep(3000);
            RequestsButtons.CreateRequestButton.Click();

            //Поля "На две недели"
            var DF2W = ReqForm.DateFrom2W;
            var DT2W = ReqForm.DateTo2Week;
            var from2W = ReqForm.DPDateFrom2Week;
            var to2W = ReqForm.DPDateTo2Week;
            //Поля "На неделю"
            var DF1W = ReqForm.DateFromOneWeek;
            var DT1W = ReqForm.DateToOneWeek;
            var from1W = ReqForm.DPDateFromOneWeek;
            var to1W = ReqForm.DPDateToOneWeek;
            //Поля "Корпоративный"
            var DFCorp = ReqForm.DateFromCorp;
            var DTCorp = ReqForm.DateToCorp;
            var fromCorp = ReqForm.DPDateFromCorp;
            var toCorp = ReqForm.DPDateToCorp;
            //Поля Итого
            var Itogo = ReqForm.Itogo;
            var DateFrom = ReqForm.DateFrom;
            var DateTo = ReqForm.DateTo;

            ReqForm.CBTwoWeek.Click();
            ReqForm.DPDateFrom2Week.Select(DateTime.Now);
            ReqForm.CBOneWeek.Click();
            ReqForm.DPDateFromOneWeek.Set(DateTime.Now.AddDays(14));
            ReqForm.DateFromOneWeek.SendKeys(Keys.Enter);
            ReqForm.CBCorp.Click();
            ReqForm.DPDateFromCorp.Set(DateTime.Now.AddDays(21));
            ReqForm.DPDateToCorp.Set(DateTime.Now.AddDays(21));
            ReqForm.DateToCorp.SendKeys(Keys.Enter);
            Assert.That(Itogo.AltText, Is.EqualTo("22"));

            //Проверка в разделе "Итого", даты "С" 
            var resultFrom = ItogoVavidate.Assert3DateFrom(DF2W, DF1W, DFCorp, DateFrom);
            Assert.That(resultFrom, Is.True);

            //Проверка в разделе "Итого", даты "По" 
            var resultTo = ItogoVavidate.Assert3DateTo(DT2W, DT1W, DTCorp, DateTo);
            Assert.That(resultTo, Is.True);

            ReqForm.SaveRequest.Click();
        }
        [Test, Title("FT-P - Проверка создания заявления на отпуск сотрудника, с указанием трех вариантов"), Author("V.Kadysev")]
        public void RequestCreate_2WeeksByDaysAndCorp_Success()
        {
            Thread.Sleep(3000);
            RequestsButtons.CreateRequestButton.Click();

            //Поля "На две недели"
            var DF2W = ReqForm.DateFrom2W;
            var DT2W = ReqForm.DateTo2Week;
            var from2W = ReqForm.DPDateFrom2Week;
            var to2W = ReqForm.DPDateTo2Week;
            //Поля "По дням"
            var DFByDays = ReqForm.DateFromByDays;
            var DTByDays = ReqForm.DateToByDays;
            var fromBD = ReqForm.DPDateFromByDays;
            var toBD = ReqForm.DPDateToByDays;
            //Поля "Корпоративный"
            var DFCorp = ReqForm.DateFromCorp;
            var DTCorp = ReqForm.DateToCorp;
            var fromCorp = ReqForm.DPDateFromCorp;
            var toCorp = ReqForm.DPDateToCorp;
            //Поля Итого
            var Itogo = ReqForm.Itogo;
            var DateFrom = ReqForm.DateFrom;
            var DateTo = ReqForm.DateTo;

            ReqForm.CBTwoWeek.Click();
            ReqForm.DPDateFrom2Week.Select(DateTime.Now);
            ReqForm.CBByDays.Click();
            ReqForm.DPDateFromByDays.Set(DateTime.Now.AddDays(14));
            ReqForm.DPDateToByDays.Set(DateTime.Now.AddDays(20));
            ReqForm.DateToByDays.SendKeys(Keys.Enter);
            ReqForm.CBCorp.Click();
            ReqForm.DPDateFromCorp.Set(DateTime.Now.AddDays(21));
            ReqForm.DPDateToCorp.Set(DateTime.Now.AddDays(21));
            ReqForm.DateToCorp.SendKeys(Keys.Enter);
            Assert.That(Itogo.AltText, Is.EqualTo("22"));

            //Проверка в разделе "Итого", даты "С" 
            var resultFrom = ItogoVavidate.Assert3DateFrom(DF2W, DFByDays, DFCorp, DateFrom);
            Assert.That(resultFrom, Is.True);

            //Проверка в разделе "Итого", даты "По" 
            var resultTo = ItogoVavidate.Assert3DateTo(DT2W, DTByDays, DTCorp, DateTo);
            Assert.That(resultTo, Is.True);

            ReqForm.SaveRequest.Click();
        }
        [Test, Title("FT-P - Проверка создания заявления на отпуск сотрудника, с указанием трех вариантов"), Author("V.Kadysev")]
        public void requestCreate_1WeekByDaysAndCorp_Success()
        {
            Thread.Sleep(3000);
            RequestsButtons.CreateRequestButton.Click();

            //Поля "На неделю"
            var DF1W = ReqForm.DateFromOneWeek;
            var DT1W = ReqForm.DateToOneWeek;
            var from1W = ReqForm.DPDateFromOneWeek;
            var to1W = ReqForm.DPDateToOneWeek;
            //Поля "По дням"
            var DFByDays = ReqForm.DateFromByDays;
            var DTByDays = ReqForm.DateToByDays;
            var fromBD = ReqForm.DPDateFromByDays;
            var toBD = ReqForm.DPDateToByDays;
            //Поля "Корпоративный"
            var DFCorp = ReqForm.DateFromCorp;
            var DTCorp = ReqForm.DateToCorp;
            var fromCorp = ReqForm.DPDateFromCorp;
            var toCorp = ReqForm.DPDateToCorp;
            //Поля Итого
            var Itogo = ReqForm.Itogo;
            var DateFrom = ReqForm.DateFrom;
            var DateTo = ReqForm.DateTo;

            ReqForm.CBOneWeek.Click();
            ReqForm.DPDateFromOneWeek.Select(DateTime.Now);
            ReqForm.CBByDays.Click();
            ReqForm.DPDateFromByDays.Set(DateTime.Now.AddDays(7));
            ReqForm.DPDateToByDays.Set(DateTime.Now.AddDays(20));
            ReqForm.DateToByDays.SendKeys(Keys.Enter);
            ReqForm.CBCorp.Click();
            ReqForm.DPDateFromCorp.Set(DateTime.Now.AddDays(21));
            ReqForm.DPDateToCorp.Set(DateTime.Now.AddDays(21));
            ReqForm.DateToCorp.SendKeys(Keys.Enter);
            Assert.That(Itogo.AltText, Is.EqualTo("22"));

            //Проверка в разделе "Итого", даты "С" 
            var resultFrom = ItogoVavidate.Assert3DateFrom(DF1W, DFByDays, DFCorp, DateFrom);
            Assert.That(resultFrom, Is.True);

            //Проверка в разделе "Итого", даты "По" 
            var resultTo = ItogoVavidate.Assert3DateTo(DT1W, DTByDays, DTCorp, DateTo);
            Assert.That(resultTo, Is.True);

            ReqForm.SaveRequest.Click();
        }
        [Test, Title("FT-P - Проверка создания заявления на отпуск сотрудника, с указанием всех вариантов"), Author("V.Kadysev")]
        public void RequestCreate_2Weeks1WeekByDaysAndCorp_Success()
        {
            Thread.Sleep(3000);
            RequestsButtons.CreateRequestButton.Click();
            //Поля "На две недели"
            var DF2W = ReqForm.DateFrom2W;
            var DT2W = ReqForm.DateTo2Week;
            var from2W = ReqForm.DPDateFrom2Week;
            var to2W = ReqForm.DPDateTo2Week;
            //Поля "На неделю"
            var DF1W = ReqForm.DateFromOneWeek;
            var DT1W = ReqForm.DateToOneWeek;
            var from1W = ReqForm.DPDateFromOneWeek;
            var to1W = ReqForm.DPDateToOneWeek;
            //Поля "По дням"
            var DFByDays = ReqForm.DateFromByDays;
            var DTByDays = ReqForm.DateToByDays;
            var fromBD = ReqForm.DPDateFromByDays;
            var toBD = ReqForm.DPDateToByDays;
            //Поля "Корпоративный"
            var DFCorp = ReqForm.DateFromCorp;
            var DTCorp = ReqForm.DateToCorp;
            var fromCorp = ReqForm.DPDateFromCorp;
            var toCorp = ReqForm.DPDateToCorp;
            //Поля Итого
            var Itogo = ReqForm.Itogo;
            var DateFrom = ReqForm.DateFrom;
            var DateTo = ReqForm.DateTo;

            ReqForm.CBTwoWeek.Click();
            ReqForm.DPDateFrom2Week.Select(DateTime.Now);
            ReqForm.CBOneWeek.Click();
            ReqForm.DPDateFromOneWeek.Set(DateTime.Now.AddDays(14));
            ReqForm.CBByDays.Click();
            ReqForm.DPDateFromByDays.Set(DateTime.Now.AddDays(21));
            ReqForm.DPDateToByDays.Set(DateTime.Now.AddDays(21));
            ReqForm.DateToByDays.SendKeys(Keys.Enter);
            ReqForm.CBCorp.Click();
            ReqForm.DPDateFromCorp.Set(DateTime.Now.AddDays(-5));
            ReqForm.DPDateToCorp.Set(DateTime.Now.AddDays(-1));
            ReqForm.DateToCorp.SendKeys(Keys.Enter);
            Assert.That(Itogo.AltText, Is.EqualTo("27"));

            //Проверка в разделе "Итого", даты "С" 
            var resultFrom = ItogoVavidate.Assert3DateFrom(DF1W, DFByDays, DFCorp, DateFrom);
            Assert.That(resultFrom, Is.True);

            //Проверка в разделе "Итого", даты "По" 
            var resultTo = ItogoVavidate.Assert3DateTo(DT1W, DTByDays, DTCorp, DateTo);
            Assert.That(resultTo, Is.True);

            ReqForm.SaveRequest.Click();
        }
        [Test, Title("FT-P - Проверка создания заявления на недельный отпуск сотрудника"), Author("V.Kadysev")]
        public void RequestCreate_CancelCreate()
        {
            Thread.Sleep(3000);
            RequestsButtons.CreateRequestButton.Click();
            var DF1W = ReqForm.DateFromOneWeek;
            var DT1W = ReqForm.DateToOneWeek;
            var from = ReqForm.DPDateFromOneWeek;
            var to = ReqForm.DPDateToOneWeek;
            var Itogo = ReqForm.Itogo;
            var DateFrom = ReqForm.DateFrom;
            var DateTo = ReqForm.DateTo;
            ReqForm.CBOneWeek.Click();
            ReqForm.DPDateFromOneWeek.Select(DateTime.Now);
            ReqForm.DateFromOneWeek.SendKeys(Keys.Enter);
            Assert.That(to.GetDate(), Is.EqualTo(from.GetDate()?.AddDays(6)));
            Assert.That(Itogo.AltText, Is.EqualTo("7"));
            Assert.That(DateFrom.AltText, Is.EqualTo(DF1W.AltText));
            Assert.That(DateTo.AltText, Is.EqualTo(DT1W.AltText));
            ReqForm.CancelRequest.Click();
            CancelAlert.SuccessButton.Click();

        }
    }
}
