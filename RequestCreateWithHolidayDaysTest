using DriverWrapper;
using NUnit.Framework;
using OpenQA.Selenium;
using System;
using VacationAuto_Test.Page.Common;
using System.Threading;
using UniqueContainerManager;
using VacationAuto_Test.Page.MyRequest;
using ExtentReportManager.Attributes;
using VacationAuto_Test.Helpers;
using System.Collections.Generic;
using System.Linq;
using VacationAuto_Test.Helpers.Model;
using VacationAuto_Test.Extension;
using VacationAuto_Test.Core.Common.Texts;

namespace VacationAuto_Test.Tests.MainPage.Create
{
    [TestFixture(typeof(AFirefoxDriver))]
    public class RequestCreateWithHolidayDaysTest<TDriver> where TDriver : IWebDriver, new()
    {
        protected const string Host = "http://s-msk-t-hr-ws1.raiffeisen.ru/Vacations/VacationsOrders";
        protected IWebDriver Driver { get; private set; }


        public RequestsTable RequestsButtons => new RequestsTable(Driver);
        //public RequestForm ReqForm => new RequestForm(Driver, Driver.FindElement((By.Id("createLeaveRequestWindow"))));
        public RequestForm ReqForm => new RequestForm(Driver, Driver.FindElement(By.Id("createLeaveRequestWindow")));
        public Alert CancelAlert => new Alert(Driver, Driver.FindElement(By.ClassName("swal2-modal selene-alert swal2-show")));

        [OneTimeSetUp]
        public virtual void OneTimeSetUp()
        {
            Thread.Sleep(1000);
            Driver = new TDriver();
        }


        [SetUp]
        public virtual void SetUp()
        {

            var testClass = TestContext.CurrentContext.Test.ClassName;
            var classType = Type.GetType(testClass);

            Driver.Navigate().GoToUrl(Host);

        }

        [TearDown]
        public virtual void TearDown()
        {
            UniqueContainer.RemoveUniqueEntities();
        }

        [OneTimeTearDown]
        public void OneTimeTearDown()
        {
            Driver.Quit();
            Driver.Dispose();
        }

        [Test, Title("FT-P - Проверка создания заявления на двухнедельный отпуск сотрудника, с попаданием в период праздничных дней"), Author("V.Kadysev")]
        [TestCase(PeriodRequest.TwoWeek)]
        [TestCase(PeriodRequest.Week)]
        public void RequestCreate_2Weeks_or_1Week_DateFromHolidays_Success(PeriodRequest period)
        {
            var vactionRequestHelper = new VacationRequestHelper(Driver);
            var from = DateTime.Parse("08.03.2018");
            var requests = new VacationRequests();
            requests.Add(new VacationRequest(period, from, from.AddDays(period.CountDays())));
            var Itogo = ReqForm.Itogo;
            var AlertHolidays = ReqForm.Holidays;
            //инцилизация
            vactionRequestHelper.Create(requests);
            //проверки
            Assert.That(Itogo.AltText, Is.EqualTo(period.QuantityDays().ToString()));
            Assert.That(AlertHolidays.DisplayNone, Is.False);
            Assert.That(AlertHolidays.Text, Is.EqualTo("В оформляемый период попали праздничные дни. Отпуск будет увеличен"));

        }
        [Test, Title("FT-P - Проверка создания заявления на двухнедельный отпуск сотрудника, с попаданием в период праздничных дней"), Author("V.Kadysev")]
        [TestCase(PeriodRequest.TwoWeek)]
        [TestCase(PeriodRequest.Week)]
        public void RequestCreate_2Weeks_or_1Week_DateToHolidays_Success(PeriodRequest period)

        {
            var vactionRequestHelper = new VacationRequestHelper(Driver);
            var from = DateTime.Parse(period.HolydaysDateFrom());
            var requests = new VacationRequests();
            requests.Add(new VacationRequest(period, from, from.AddDays(period.CountDays())));
            var Itogo = ReqForm.Itogo;
            var AlertHolidays = ReqForm.Holidays;
            //инцилизация
            vactionRequestHelper.Create(requests);
            //проверки
            Assert.That(Itogo.AltText, Is.EqualTo(period.QuantityDays().ToString()));
            Assert.That(AlertHolidays.DisplayNone, Is.False);
            Assert.That(AlertHolidays.Text, Is.EqualTo("В оформляемый период попали праздничные дни. Отпуск будет увеличен"));
        }
        [Test, Title("FT-P - Проверка создания заявления на двухнедельный отпуск сотрудника, с попаданием в период праздничных дней"), Author("V.Kadysev")]
        [TestCase(PeriodRequest.TwoWeek)]
        [TestCase(PeriodRequest.Week)]
        public void RequestCreate_2Weeks_or_1Week_ContainsHolidays_Success(PeriodRequest period)
        {
            var vactionRequestHelper = new VacationRequestHelper(Driver);
            var from = DateTime.Parse("05.03.2018");
            var requests = new VacationRequests();
            requests.Add(new VacationRequest(period, from, from.AddDays(period.CountDays())));
            var Itogo = ReqForm.Itogo;
            var AlertHolidays = ReqForm.Holidays;
            //инцилизация
            vactionRequestHelper.Create(requests);
            //проверки
            Assert.That(Itogo.AltText, Is.EqualTo(period.QuantityDays().ToString()));
            Assert.That(AlertHolidays.DisplayNone, Is.False);
            Assert.That(AlertHolidays.Text, Is.EqualTo("В оформляемый период попали праздничные дни. Отпуск будет увеличен"));
        }
        [Test, Title("FT-P - Проверка создания заявления на  отпуск сотрудника по дням, с попаданием в период праздничных дней"), Author("V.Kadysev")]
        [TestCase(PeriodRequest.Days, "06.01.2018", "06.01.2018")]
        [TestCase(PeriodRequest.Days, "08.03.2018", "10.03.2018")]
        [TestCase(PeriodRequest.Days, "06.03.2018", "08.03.2018")]
        [TestCase(PeriodRequest.Days, "07.03.2018", "09.03.2018")]
        public void RequestCreate_ByDayDateFromAndDateToHolidays_DayByDay_Success(PeriodRequest period, string fromString, string toString)
        {
            //тестовые данные
            var vactionRequestHelper = new VacationRequestHelper(Driver);

            var from = DateTime.Parse(fromString);
            var to = DateTime.Parse(toString);
            var qDays = (to - from).Days + 1;
            var AlertHolidays = ReqForm.Holidays;
            var Itogo = ReqForm.Itogo;
            var requests = new VacationRequests();
            requests.Add(new VacationRequest(period, from, to));

            //инцилизация
            vactionRequestHelper.Create(requests);
            Assert.That(AlertHolidays.DisplayNone, Is.False);
            Assert.That(AlertHolidays.Text, Is.EqualTo("В оформляемый период попали праздничные дни. Отпуск будет увеличен"));
            Assert.That(Itogo.AltText, Is.EqualTo(qDays.ToString()));

        }
        [Test, Title("FT-P - Проверка создания заявления на  отпуск сотрудника по дням, с попаданием в период праздничных дней"), Author("V.Kadysev")]
        public void RequestCreate_ByDayDateFromHolidays_Success()
        {
            Thread.Sleep(3000);
            RequestsButtons.CreateRequestButton.Click();
            var DFByDays = ReqForm.DateFromByDays;
            var DTByDays = ReqForm.DateToByDays;
            var from = ReqForm.DPDateFromByDays;
            var to = ReqForm.DPDateToByDays;
            var Itogo = ReqForm.Itogo;
            var DateFrom = ReqForm.DateFrom;
            var DateTo = ReqForm.DateTo;
            var AlertHolidays = ReqForm.Holidays;
            ReqForm.CBByDays.Click();
            ReqForm.DPDateFromByDays.Set(2018, 03, 08);
            ReqForm.DPDateToByDays.Set(2018, 03, 10);
            ReqForm.DateToByDays.SendKeys(Keys.Enter);
            Assert.That(Itogo.AltText, Is.EqualTo("4"));
            Assert.That(AlertHolidays.DisplayNone, Is.False);
            Assert.That(AlertHolidays.Text, Is.EqualTo("В оформляемый период попали праздничные дни. Отпуск будет увеличен"));
            Assert.That(DateFrom.AltText, Is.EqualTo(DFByDays.AltText));
            Assert.That(DateTo.AltText, Is.EqualTo(DTByDays.AltText));
            ReqForm.SaveRequest.Click();
        }
        [Test, Title("FT-P - Проверка создания заявления на  отпуск сотрудника по дням, с попаданием в период праздничных дней"), Author("V.Kadysev")]
        public void RequestCreate_ByDayDateToHolidays_Success()
        {
            Thread.Sleep(3000);
            RequestsButtons.CreateRequestButton.Click();
            var DFByDays = ReqForm.DateFromByDays;
            var DTByDays = ReqForm.DateToByDays;
            var from = ReqForm.DPDateFromByDays;
            var to = ReqForm.DPDateToByDays;
            var Itogo = ReqForm.Itogo;
            var DateFrom = ReqForm.DateFrom;
            var DateTo = ReqForm.DateTo;
            var AlertHolidays = ReqForm.Holidays;
            ReqForm.CBByDays.Click();
            ReqForm.DPDateFromByDays.Set(2018, 03, 06);
            ReqForm.DPDateToByDays.Set(2018, 03, 08);
            ReqForm.DateToByDays.SendKeys(Keys.Enter);
            Assert.That(Itogo.AltText, Is.EqualTo("4"));
            Assert.That(AlertHolidays.DisplayNone, Is.False);
            Assert.That(AlertHolidays.Text, Is.EqualTo("В оформляемый период попали праздничные дни. Отпуск будет увеличен"));
            Assert.That(DateFrom.AltText, Is.EqualTo(DFByDays.AltText));
            Assert.That(DateTo.AltText, Is.EqualTo(DTByDays.AltText));
            ReqForm.SaveRequest.Click();
        }
        [Test, Title("FT-P - Проверка создания заявления на  отпуск сотрудника по дням, с попаданием в период праздничных дней"), Author("V.Kadysev")]
        public void RequestCreate_ByDayContainHolidays_Success()
        {
            Thread.Sleep(3000);
            RequestsButtons.CreateRequestButton.Click();
            var DFByDays = ReqForm.DateFromByDays;
            var DTByDays = ReqForm.DateToByDays;
            var from = ReqForm.DPDateFromByDays;
            var to = ReqForm.DPDateToByDays;
            var Itogo = ReqForm.Itogo;
            var DateFrom = ReqForm.DateFrom;
            var DateTo = ReqForm.DateTo;
            var AlertHolidays = ReqForm.Holidays;
            ReqForm.CBByDays.Click();
            ReqForm.DPDateFromByDays.Set(2018, 03, 07);
            ReqForm.DPDateToByDays.Set(2018, 03, 09);
            ReqForm.DateToByDays.SendKeys(Keys.Enter);
            Assert.That(Itogo.AltText, Is.EqualTo("4"));
            Assert.That(AlertHolidays.DisplayNone, Is.False);
            Assert.That(AlertHolidays.Text, Is.EqualTo("В оформляемый период попали праздничные дни. Отпуск будет увеличен"));
            Assert.That(DateFrom.AltText, Is.EqualTo(DFByDays.AltText));
            Assert.That(DateTo.AltText, Is.EqualTo(DTByDays.AltText));
            ReqForm.SaveRequest.Click();
        }
        [Test, Title("FT-P - Проверка создания заявления на корпоративный отпуск сотрудника, с попаданием в период праздничных дней"), Author("V.Kadysev")]
        public void RequestCreate_CorporateDateFromHolidays_DayByDay_Success()
        {
            Thread.Sleep(3000);
            RequestsButtons.CreateRequestButton.Click();
            var DFCorp = ReqForm.DateFromCorp;
            var DTCorp = ReqForm.DateToCorp;
            var from = ReqForm.DPDateFromCorp;
            var to = ReqForm.DPDateToCorp;
            var Itogo = ReqForm.Itogo;
            var DateFrom = ReqForm.DateFrom;
            var DateTo = ReqForm.DateTo;
            var AlertHolidays = ReqForm.Holidays;
            ReqForm.CBCorp.Click();
            ReqForm.DPDateFromCorp.Set(2018, 01, 06);
            ReqForm.DPDateToCorp.Set(2018, 01, 09);
            ReqForm.DateToCorp.SendKeys(Keys.Enter);
            Assert.That(Itogo.AltText, Is.EqualTo("7"));
            Assert.That(AlertHolidays.DisplayNone, Is.False);
            Assert.That(AlertHolidays.Text, Is.EqualTo("В оформляемый период попали праздничные дни. Отпуск будет увеличен"));
            Assert.That(DateFrom.AltText, Is.EqualTo(DFCorp.AltText));
            Assert.That(DateTo.AltText, Is.EqualTo(DTCorp.AltText));
            ReqForm.SaveRequest.Click();
        }
        [Test, Title("FT-P - Проверка создания заявления на корпоративный отпуск сотрудника, с попаданием в период праздничных дней"), Author("V.Kadysev")]
        public void RequestCreate_CorporateDateFromHolidays_Success()
        {
            Thread.Sleep(3000);
            RequestsButtons.CreateRequestButton.Click();
            var DFCorp = ReqForm.DateFromCorp;
            var DTCorp = ReqForm.DateToCorp;
            var from = ReqForm.DPDateFromCorp;
            var to = ReqForm.DPDateToCorp;
            var Itogo = ReqForm.Itogo;
            var DateFrom = ReqForm.DateFrom;
            var DateTo = ReqForm.DateTo;
            var AlertHolidays = ReqForm.Holidays;
            ReqForm.CBCorp.Click();
            ReqForm.DPDateFromCorp.Set(2018, 03, 08);
            ReqForm.DPDateToCorp.Set(2018, 03, 10);
            ReqForm.DateToCorp.SendKeys(Keys.Enter);
            Assert.That(Itogo.AltText, Is.EqualTo("4"));
            Assert.That(AlertHolidays.DisplayNone, Is.False);
            Assert.That(AlertHolidays.Text, Is.EqualTo("В оформляемый период попали праздничные дни. Отпуск будет увеличен"));
            Assert.That(DateFrom.AltText, Is.EqualTo(DFCorp.AltText));
            Assert.That(DateTo.AltText, Is.EqualTo(DTCorp.AltText));
            ReqForm.SaveRequest.Click();
        }
        [Test, Title("FT-P - Проверка создания заявления на корпоративный отпуск сотрудника, с попаданием в период праздничных дней"), Author("V.Kadysev")]
        public void RequestCreate_CorporateDateToHolidays_Success()
        {
            Thread.Sleep(3000);
            RequestsButtons.CreateRequestButton.Click();
            var DFCorp = ReqForm.DateFromCorp;
            var DTCorp = ReqForm.DateToCorp;
            var from = ReqForm.DPDateFromCorp;
            var to = ReqForm.DPDateToCorp;
            var Itogo = ReqForm.Itogo;
            var DateFrom = ReqForm.DateFrom;
            var DateTo = ReqForm.DateTo;
            var AlertHolidays = ReqForm.Holidays;
            ReqForm.CBCorp.Click();
            ReqForm.DPDateFromCorp.Set(2018, 03, 06);
            ReqForm.DPDateToCorp.Set(2018, 03, 08);
            ReqForm.DateToCorp.SendKeys(Keys.Enter);
            Assert.That(Itogo.AltText, Is.EqualTo("4"));
            Assert.That(AlertHolidays.DisplayNone, Is.False);
            Assert.That(AlertHolidays.Text, Is.EqualTo("В оформляемый период попали праздничные дни. Отпуск будет увеличен"));
            Assert.That(DateFrom.AltText, Is.EqualTo(DFCorp.AltText));
            Assert.That(DateTo.AltText, Is.EqualTo(DTCorp.AltText));
            ReqForm.SaveRequest.Click();
        }
        [Test, Title("FT-P - Проверка создания заявления на корпоративный отпуск сотрудника, с попаданием в период праздничных дней"), Author("V.Kadysev")]
        public void RequestCreate_CorporateContainHolidays_Success()
        {
            Thread.Sleep(3000);
            RequestsButtons.CreateRequestButton.Click();
            var DFCorp = ReqForm.DateFromCorp;
            var DTCorp = ReqForm.DateToCorp;
            var from = ReqForm.DPDateFromCorp;
            var to = ReqForm.DPDateToCorp;
            var Itogo = ReqForm.Itogo;
            var DateFrom = ReqForm.DateFrom;
            var DateTo = ReqForm.DateTo;
            var AlertHolidays = ReqForm.Holidays;
            ReqForm.CBCorp.Click();
            ReqForm.DPDateFromCorp.Set(2018, 03, 07);
            ReqForm.DPDateToCorp.Set(2018, 03, 09);
            ReqForm.DateToCorp.SendKeys(Keys.Enter);
            Assert.That(Itogo.AltText, Is.EqualTo("4"));
            Assert.That(AlertHolidays.DisplayNone, Is.False);
            Assert.That(AlertHolidays.Text, Is.EqualTo("В оформляемый период попали праздничные дни. Отпуск будет увеличен"));
            Assert.That(DateFrom.AltText, Is.EqualTo(DFCorp.AltText));
            Assert.That(DateTo.AltText, Is.EqualTo(DTCorp.AltText));
            ReqForm.SaveRequest.Click();
        }

    }
}
